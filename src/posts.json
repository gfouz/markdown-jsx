[{"id":1642201200,"title":"composición funcional\r","author":"Giovani Fouz Jiménez\r","date":"january 15, 2022\r","img":"wallpaper.webp\r","description":"El paradigma de la programación funcional es\r","content":" \r\n ![react wallpaper](/images/wallpaper.webp)\r\n\r\n ## Composición funcional\r\n La composición es la piedra angular que nos permitirá a partir de \r\n funciones puras genéricas crear funciones más específicas para al \r\n final construir nuestros programas.Similar a como en la música las notas \r\n (funciones puras) conforman acordes (funciones de dominio compuestas)\r\n y los acordes conforman obras (pieza de software), la composición será \r\n el pegamento que nos permitirá desarrollar nuestros programas."},{"id":1645398000,"title":"Inmutabilidad\r","author":"Giovani Fouz Jiménez\r","date":"febraury 21, 2022\r","img":"react.png\r","description":"Que significa inmutabilidad y porque es tan importante\r","content":"![react wallpaper](/images/react.png)\r\n## Mutable o Inmutable.\r\n\r\nEl desarrollo con datos inmutables es un principio fundamental de la\r\nprogramación funcional que se está extendiendo también en la\r\nprogramación orientada a objeto. Su planteamiento básico es muy\r\nsencillo: un dato u objeto, una vez creado, no puede ser cambiado,\r\nmanteniendo su estado original en todo momento. Si por algún motivo se\r\ntuviera que cambiar el dato, entonces se obtendría una copia con los\r\ndatos modificados, pero nunca se cambian los valores originales. Lo\r\ncontrario a la inmutabilidad es la mutabilidad, es decir, la capacidad\r\npara cambiar el valor o el estado de los elementos de un lenguaje de\r\nprogramación. Cuando cambiamos el valor de una propiedad, o la\r\nreferencia de una variable, estamos haciendo uso de mutabilidad, es\r\ndecir, de la capacidad de cambiar.\r\n\r\n## Utilidad de 'const' en JavaScript.\r\n\r\n'const' nos va ayudar a declarar variables inmutables, esto es, a\r\ndeclarar variables cuyo valor no pueda ser cambiado a lo largo del\r\nciclo de vida de una variable. si intentamos asignar un nuevo valor a\r\nla constante, se nos lanzará una excepción con el error provocado.\r\nTenemos que tener cuidado cuando deseemos almacenar un objeto JSON en\r\nuna constante de JavaScript. cuando asignamos un objeto a una\r\nvariable, no estamos almacenando el objeto en si en esa variable, si\r\nno que se está almacenando una referencia al objeto. Se almacena el\r\npuntero con la posición donde se encuentra el objeto real. Por tanto,\r\nsi seguimos esta lógica, lo que ‘const’ está convirtiendo en inmutable\r\nno es el objeto en si, si no la referencia a ese objeto.\r\n\r\n```js\r\n(() => {\r\n  const url = \"https://gist.github.com/\";\r\n  url = \"http://www.as.com\"; // Lanza un error!\r\n})();\r\n```\r\n\r\n#### Sin embargo, no se produce error al asignar nuevos valores a la propiedades de un objeto:\r\n\r\n```js\r\n(() => {\r\n  const objeto = {\r\n    nombre: \"Giovani\",\r\n  };\r\n  objeto.apellidos = \"creo nueva propiedad, cuyo valor es mutable\";\r\n  objeto.nombre = \"cambio el valor, no se lanza ninguna excepción\";\r\n\r\n  console.log(any);\r\n})();\r\n```\r\n\r\nReitero lo anterior respecto a JavaScript, cuando asignamos un objeto a una variable, no estamos almacenando el objeto en si en esa variable, si no que se está almacenando una referencia del objeto. Se almacena el puntero con la posición en memoria donde se encuentra el objeto real.\r\n\r\n"},{"id":1644015600,"title":"Reactivity\r","author":"Giovani Fouz Jiménez\r","date":"febraury 5, 2022\r","img":"teacher.jpg\r","description":"Que es la reactividad y porque es tan importante\r","content":"\r\n![react wallpaper](/images/teacher.jpg)\r\n\r\n## The non-reactive nature of JavaScript.\r\n\r\nthis  article, we’re going to look at reactivity in Vue, how it works,\r\nand  how  we can create reactive variables using newly created methods\r\nand  functions. This article is targeted at developers who have a good\r\nunderstanding  of  how  Vue  2.x works and are looking to get familiar\r\nwith  the  new  Vue  3.  We’re  going to build a simple application to\r\nbetter  understand  this  topic. The code for this app can be found on\r\nGitHub.  By  default, JavaScript isn’t reactive. This means that if we\r\ncreate the variable boy and reference it in part A of our application,\r\nthen  proceed to modify boy in part B, part A will not update with the\r\nnew value of boy.\r\n\r\n\r\n```js\r\n    let framework = 'Vue';\r\n    let words = `${framework} is cool`;\r\n    console.log(words)\r\n    // logs \"Vue is awesome\"\r\n    framework = 'React';\r\n    console.log(words)\r\n    //should log \"React is awesome\"\r\n    // if 'words' were reactive.\r\n\r\n```\r\n\r\n## Reactive properties.\r\n\r\nThe  snippet  above is a perfect example of the non-reactive nature of\r\nJavaScript  —  hence,  why  the change isn’t reflected in the sentence\r\nvariable. In Vue 2.x, props, computed, and data() were all reactive by\r\ndefault, with the exception of properties that are not present in data\r\nwhen  such components are created. This means that when a component is\r\ninjected into the DOM, only the existing properties in the component’s\r\ndata  object  would  cause  the  component  to update if and when such\r\nproperties  change.  Internally,  Vue  3  uses  the  Proxy  object (an\r\nECMAScript  6  feature)  to ensure that these properties are reactive,\r\nbut it still provides the option to use Object.defineProperty from Vue\r\n2  for Internet Explorer support (ECMAScript 5). This method defines a\r\nnew  property  directly on an object, or modifies an existing property\r\non an object, and returns the object.\r\n\r\n## Composition Api.\r\n\r\nAt  first  glance and since most of us already know that reactivity is\r\nnot  new  in  Vue,  it  might  seem  unnecessary  to make use of these\r\nproperties,  but  the  Options  API  has  its  limitations when you’re\r\ndealing  with  a  large application with reusable functions in several\r\nparts  of  the  application.  To this end, the new Composition API was\r\nintroduced to help with abstracting logic in order to make a code base\r\neasier to read and maintain. Also, we can now easily make any variable\r\nreactive  regardless  of its data type using any of the new properties\r\nand  methods.  When we use the setup option, which serves as the entry\r\npoint  for  the Composition API, the data object, computed properties,\r\nand  methods  are  inaccessible because the component instance has not\r\nyet  been  created when setup is executed. This makes it impossible to\r\ntake  advantage of the built-in reactivity in any of these features in\r\nsetup.\r\n\r\n"}]